{
  "language": "Solidity",
  "sources": {
    "contracts/Liquidity.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract Liquidity {\n\tstruct LiquidityInfo {\n\t\tuint256 id;\n\t\taddress owner;\n\t\tstring tokenA;\n\t\tstring tokenB;\n\t\tstring tokenA_Address;\n\t\tstring tokenB_Address;\n\t\tstring poolAddress;\n\t\tstring network;\n\t\tstring transactionHash;\n\t\tuint256 timeCreated;\n\t}\n\taddress public admin;\n\tmapping(address => LiquidityInfo[]) public liquidities;\n\tuint256 public liquidityId;\n\n\tmodifier onlyAdmin() {\n\t\trequire(msg.sender == admin, \"only admin can call this function\");\n\t\t_;\n\t}\n\tconstructor() {\n\t\tadmin = msg.sender;\n\t}\n\n\tfunction addLiquidity(\n\t\tstring memory _tokenA,\n\t\tstring memory _tokenB,\n\t\tstring memory _tokenA_Address,\n\t\tstring memory _tokenB_Address,\n\t\tstring memory _poolAddress,\n\t\tstring memory _network,\n\t\tstring memory _transactionHash\n\t) public {\n\t\tliquidityId++;\n\n\t\tuint256 currentLiquidityId = liquidityId;\n\n\t\tliquidities[msg.sender].push(\n\t\t\tLiquidityInfo({\n\t\t\t\tid: currentLiquidityId,\n\t\t\t\towner: msg.sender,\n\t\t\t\ttokenA: _tokenA,\n\t\t\t\ttokenB: _tokenB,\n\t\t\t\ttokenA_Address: _tokenA_Address,\n\t\t\t\ttokenB_Address: _tokenB_Address,\n\t\t\t\tpoolAddress: _poolAddress,\n\t\t\t\tnetwork: _network,\n\t\t\t\ttransactionHash: _transactionHash,\n\t\t\t\ttimeCreated: block.timestamp\n\t\t\t})\n\t\t);\n\t}\n\n\tfunction getAllLiquidity(\n\t\taddress _address\n\t) public view returns (LiquidityInfo[] memory) {\n\t\treturn liquidities[_address];\n\t}\n\n\tfunction transferEther() external payable {\n\t\trequire(msg.value > 0, \"amount should be greater than 0\");\n\n\t\t(bool success, ) = admin.call{ value: msg.value }(\"\");\n\n\t\trequire(success, \"Transfer failed.\");\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}